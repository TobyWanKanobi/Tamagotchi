//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication.TamagotchiService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TamagotchiContract", Namespace="http://schemas.datacontract.org/2004/07/TamagotchiWcfService.Contract")]
    [System.SerializableAttribute()]
    internal partial class TamagotchiContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BoredomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CooldownField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HealthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HungerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAliveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SleepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Boredom {
            get {
                return this.BoredomField;
            }
            set {
                if ((this.BoredomField.Equals(value) != true)) {
                    this.BoredomField = value;
                    this.RaisePropertyChanged("Boredom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Cooldown {
            get {
                return this.CooldownField;
            }
            set {
                if ((this.CooldownField.Equals(value) != true)) {
                    this.CooldownField = value;
                    this.RaisePropertyChanged("Cooldown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Health {
            get {
                return this.HealthField;
            }
            set {
                if ((this.HealthField.Equals(value) != true)) {
                    this.HealthField = value;
                    this.RaisePropertyChanged("Health");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Hunger {
            get {
                return this.HungerField;
            }
            set {
                if ((this.HungerField.Equals(value) != true)) {
                    this.HungerField = value;
                    this.RaisePropertyChanged("Hunger");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal bool IsAlive {
            get {
                return this.IsAliveField;
            }
            set {
                if ((this.IsAliveField.Equals(value) != true)) {
                    this.IsAliveField = value;
                    this.RaisePropertyChanged("IsAlive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.DateTime LastAccess {
            get {
                return this.LastAccessField;
            }
            set {
                if ((this.LastAccessField.Equals(value) != true)) {
                    this.LastAccessField = value;
                    this.RaisePropertyChanged("LastAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.DateTime LastAction {
            get {
                return this.LastActionField;
            }
            set {
                if ((this.LastActionField.Equals(value) != true)) {
                    this.LastActionField = value;
                    this.RaisePropertyChanged("LastAction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int Sleep {
            get {
                return this.SleepField;
            }
            set {
                if ((this.SleepField.Equals(value) != true)) {
                    this.SleepField = value;
                    this.RaisePropertyChanged("Sleep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ActionContract", Namespace="http://schemas.datacontract.org/2004/07/TamagotchiWcfService.Contract")]
    [System.SerializableAttribute()]
    internal partial class ActionContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TamagotchiService.ITamagotchiService")]
    internal interface ITamagotchiService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITamagotchiService/GetTamagotchiByName", ReplyAction="http://tempuri.org/ITamagotchiService/GetTamagotchiByNameResponse")]
        ConsoleApplication.TamagotchiService.TamagotchiContract GetTamagotchiByName(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITamagotchiService/GetTamagotchiByName", ReplyAction="http://tempuri.org/ITamagotchiService/GetTamagotchiByNameResponse")]
        System.Threading.Tasks.Task<ConsoleApplication.TamagotchiService.TamagotchiContract> GetTamagotchiByNameAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITamagotchiService/GetTamagotchies", ReplyAction="http://tempuri.org/ITamagotchiService/GetTamagotchiesResponse")]
        ConsoleApplication.TamagotchiService.TamagotchiContract[] GetTamagotchies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITamagotchiService/GetTamagotchies", ReplyAction="http://tempuri.org/ITamagotchiService/GetTamagotchiesResponse")]
        System.Threading.Tasks.Task<ConsoleApplication.TamagotchiService.TamagotchiContract[]> GetTamagotchiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITamagotchiService/ExecuteAction", ReplyAction="http://tempuri.org/ITamagotchiService/ExecuteActionResponse")]
        ConsoleApplication.TamagotchiService.TamagotchiContract ExecuteAction(ConsoleApplication.TamagotchiService.ActionContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITamagotchiService/ExecuteAction", ReplyAction="http://tempuri.org/ITamagotchiService/ExecuteActionResponse")]
        System.Threading.Tasks.Task<ConsoleApplication.TamagotchiService.TamagotchiContract> ExecuteActionAsync(ConsoleApplication.TamagotchiService.ActionContract contract);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface ITamagotchiServiceChannel : ConsoleApplication.TamagotchiService.ITamagotchiService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class TamagotchiServiceClient : System.ServiceModel.ClientBase<ConsoleApplication.TamagotchiService.ITamagotchiService>, ConsoleApplication.TamagotchiService.ITamagotchiService {
        
        public TamagotchiServiceClient() {
        }
        
        public TamagotchiServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TamagotchiServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TamagotchiServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TamagotchiServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConsoleApplication.TamagotchiService.TamagotchiContract GetTamagotchiByName(string Name) {
            return base.Channel.GetTamagotchiByName(Name);
        }
        
        public System.Threading.Tasks.Task<ConsoleApplication.TamagotchiService.TamagotchiContract> GetTamagotchiByNameAsync(string Name) {
            return base.Channel.GetTamagotchiByNameAsync(Name);
        }
        
        public ConsoleApplication.TamagotchiService.TamagotchiContract[] GetTamagotchies() {
            return base.Channel.GetTamagotchies();
        }
        
        public System.Threading.Tasks.Task<ConsoleApplication.TamagotchiService.TamagotchiContract[]> GetTamagotchiesAsync() {
            return base.Channel.GetTamagotchiesAsync();
        }
        
        public ConsoleApplication.TamagotchiService.TamagotchiContract ExecuteAction(ConsoleApplication.TamagotchiService.ActionContract contract) {
            return base.Channel.ExecuteAction(contract);
        }
        
        public System.Threading.Tasks.Task<ConsoleApplication.TamagotchiService.TamagotchiContract> ExecuteActionAsync(ConsoleApplication.TamagotchiService.ActionContract contract) {
            return base.Channel.ExecuteActionAsync(contract);
        }
    }
}
